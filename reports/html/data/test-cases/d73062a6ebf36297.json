{
  "uid" : "d73062a6ebf36297",
  "name" : "注册接口",
  "fullName" : "test_case.jie_kou_liucheng#test_change_pwd_var",
  "historyId" : "55b350ab3ec83554fd9ef529aa0758f4",
  "time" : {
    "start" : 1568280156396,
    "stop" : 1568280156575,
    "duration" : 179
  },
  "status" : "failed",
  "statusDetails" : {
    "message" : "AssertionError",
    "trace" : "@allure.title(\"注册接口\")\n    def test_change_pwd_var():\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + '/signup'\n    \n        req = {\n      \"phone\": \"13964821453\",\n      \"pwd\": \"striy3322\",\n      \"rePwd\": \"striy3322\",\n      \"userName\": d[\"userName\"]\n    }\n    \n    \n        resp = request_tool.post_request(url, json=req)\n        body = resp.json()\n        # 判断响应码\n        allure.attach(\"预期结果:{},实际结果:{}\".format(200, resp.status_code), \"响应状态码断言\", allure.attachment_type.TEXT)\n        assert_tool.assert_equal(resp.status_code, 200)\n        allure.attach(\"预期结果:{},实际结果:{}\".format(2000,body['code']),\"响应code\",allure.attachment_type.TEXT)\n        # 自定义断言\n>       assert_tool.assert_equal(body['code'], 2000)\n\ntest_case\\jie_kou_liucheng.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 9999, expected_msg = 2000\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
    "flaky" : false
  },
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusDetails" : {
      "message" : "AssertionError",
      "trace" : "@allure.title(\"注册接口\")\n    def test_change_pwd_var():\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + '/signup'\n    \n        req = {\n      \"phone\": \"13964821453\",\n      \"pwd\": \"striy3322\",\n      \"rePwd\": \"striy3322\",\n      \"userName\": d[\"userName\"]\n    }\n    \n    \n        resp = request_tool.post_request(url, json=req)\n        body = resp.json()\n        # 判断响应码\n        allure.attach(\"预期结果:{},实际结果:{}\".format(200, resp.status_code), \"响应状态码断言\", allure.attachment_type.TEXT)\n        assert_tool.assert_equal(resp.status_code, 200)\n        allure.attach(\"预期结果:{},实际结果:{}\".format(2000,body['code']),\"响应code\",allure.attachment_type.TEXT)\n        # 自定义断言\n>       assert_tool.assert_equal(body['code'], 2000)\n\ntest_case\\jie_kou_liucheng.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 9999, expected_msg = 2000\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
      "flaky" : false
    },
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2db26e2ff3b1c5aa",
      "name" : "请求",
      "source" : "2db26e2ff3b1c5aa.txt",
      "type" : "text/plain",
      "size" : 318
    }, {
      "uid" : "286d962e2cdd0bc7",
      "name" : "响应",
      "source" : "286d962e2cdd0bc7.txt",
      "type" : "text/plain",
      "size" : 208
    }, {
      "uid" : "27f17da551d81288",
      "name" : "响应状态码断言",
      "source" : "27f17da551d81288.txt",
      "type" : "text/plain",
      "size" : 33
    }, {
      "uid" : "3f350e77507c3632",
      "name" : "响应code",
      "source" : "3f350e77507c3632.txt",
      "type" : "text/plain",
      "size" : 35
    }, {
      "uid" : "c663aa89a6575ca0",
      "name" : "log",
      "source" : "c663aa89a6575ca0.txt",
      "type" : "text/plain",
      "size" : 1367
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 5,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "jie_kou_liucheng"
  }, {
    "name" : "subSuite"
  }, {
    "name" : "host",
    "value" : "SKY-20190805NAY"
  }, {
    "name" : "thread",
    "value" : "4436-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.jie_kou_liucheng"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "extra" : {
    "tags" : [ ]
  },
  "source" : "d73062a6ebf36297.json",
  "statusDetailsSafe" : {
    "message" : "AssertionError",
    "trace" : "@allure.title(\"注册接口\")\n    def test_change_pwd_var():\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + '/signup'\n    \n        req = {\n      \"phone\": \"13964821453\",\n      \"pwd\": \"striy3322\",\n      \"rePwd\": \"striy3322\",\n      \"userName\": d[\"userName\"]\n    }\n    \n    \n        resp = request_tool.post_request(url, json=req)\n        body = resp.json()\n        # 判断响应码\n        allure.attach(\"预期结果:{},实际结果:{}\".format(200, resp.status_code), \"响应状态码断言\", allure.attachment_type.TEXT)\n        assert_tool.assert_equal(resp.status_code, 200)\n        allure.attach(\"预期结果:{},实际结果:{}\".format(2000,body['code']),\"响应code\",allure.attachment_type.TEXT)\n        # 自定义断言\n>       assert_tool.assert_equal(body['code'], 2000)\n\ntest_case\\jie_kou_liucheng.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 9999, expected_msg = 2000\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
    "flaky" : false
  },
  "statusMessage" : {
    "present" : true
  },
  "parameterValues" : [ ]
}